<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 鱼吠</title>
    <link>http://fishu.cn/categories/golang/</link>
    <description>Recent content in golang on 鱼吠</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 11 Sep 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://fishu.cn/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>基于 Go 实现I/O多路复用(二)</title>
      <link>http://fishu.cn/blog/%E5%9F%BA%E4%BA%8E-go-%E5%AE%9E%E7%8E%B0i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%BA%8C/</link>
      <pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>http://fishu.cn/blog/%E5%9F%BA%E4%BA%8E-go-%E5%AE%9E%E7%8E%B0i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%BA%8C/</guid>
      <description>yamux 基于可靠连接，提供面向流的 I/O 复用，上次简单说了下 yamux 的协议，这次来分析源码。我们从一个小例子出发，逐步击穿核心。
服务端代码 package main import ( &amp;quot;net&amp;quot; &amp;quot;github.com/hashicorp/yamux&amp;quot; ) func main() { server() } func server() { // 因为 yamux 面向底层可靠连接，所以我们需要先提供一个 tcp 连接 listener, err := net.Listen(&amp;quot;tcp&amp;quot;, &amp;quot;:8082&amp;quot;) if err != nil { panic(err) } // 等待 tcp client 连接 conn, err := listener.Accept() if err != nil { panic(err) } // 启动 yamux server 端 session, err := yamux.Server(conn, nil) if err != nil { panic(err) } // 等待 yamux client 连接 stream, err := session.</description>
    </item>
    
    <item>
      <title>基于 Go 实现I/O多路复用(一)</title>
      <link>http://fishu.cn/blog/%E5%9F%BA%E4%BA%8E-go-%E5%AE%9E%E7%8E%B0i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%80/</link>
      <pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://fishu.cn/blog/%E5%9F%BA%E4%BA%8E-go-%E5%AE%9E%E7%8E%B0i/o%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E4%B8%80/</guid>
      <description>可能大家对 Nginx 都不陌生，Nginx 因为它高效的事件模块赢得了众多人的赞赏，Nginx 的事件驱动机制（I/O多路复用）在 Linux 平台下是使用 epoll 来实现，简单来说，epoll 不同于轮询，它会把哪个连接发送了怎样的 I/O 事件通知到我们，今天来说的基于 Go 实现的 I/O 多路复用库 yamux ，没有使用系统级别的事件驱动机制（如：epoll、kqueue），这得益于 Go 廉价的 goroutine 开销，yamux 依赖底层可靠的连接（tcp、unix domain sockets），在可靠的连接之上提供了面向流 I/O 多路复用，其核心思想是在发送数据的时候增加头部信息，附加一层协议。 在 yamux 中，一条连接称为 session，一个 session 可以开启多个数据流，数据流称为 stream。今天先来看下它是如何设计的，下次再分析源码。
定义帧结构 每一帧数据都需要包含如下的头部：
 Version(8 bits) Type(8 bits) Flags(16 bits) StreamID(32 bits) Length(32 bits)  一共12个字节，所有的字段都采用大端（big endian）传输。接下来我们解释每个字段的意思。
Version 字段 顾名思义就是用来指定版本的，目的是为了向后兼容，现在我们可以把他设为0。
Type 字段 区分消息类型：
 0x0 Data - 传输数据 0x1 Window Update - 更新发送者的接收窗口大小 0x2 Ping - 测试 RTT。也可以用来做心跳和 keep-alives 0x3 Go Away - 关闭 session  Flag 字段 配合 type 字段提供额外的信息：</description>
    </item>
    
    <item>
      <title>Go Package Layout 参考</title>
      <link>http://fishu.cn/blog/go-package-layout-%E5%8F%82%E8%80%83/</link>
      <pubDate>Tue, 18 Jul 2017 20:26:38 +0800</pubDate>
      
      <guid>http://fishu.cn/blog/go-package-layout-%E5%8F%82%E8%80%83/</guid>
      <description>想让你的 Go 代码 简洁明了，你需要做好下面两点：
 命名
 package layout
  命名我在上一篇文章里面讲到了，这次我想分享下自己在 Go 语言 package 设计方面的实践。
package 在 Go 中是这样定义的：包含一个或者多个以.go结尾的文件，同时这些文件都有同一个 package 名并且处于同一个目录中。简单来说就是一个文件夹中放了几个 package 名字相同的 go 文件，package 在 go 中是有独立命名空间的，它里面的全局变量是与其他 package 隔离的，Go不是一门类似 java 这类面向对象的语言，他的设计哲学是模块化，package 是 Go 程序结构层面的唯一组织形式，它将设计、语法、命名、构建、链接和测试都聚于一包中，导入和使用非常简单，所以无 package 不成 Go ，要写出牛逼的代码，必须理解 package 机制，Go coding in go way。
一开始写Go的时候，我总喜欢把所有的东西都放在一个包中，导致这个包臃肿而巨大，往往都是以文件名来隔离函数功能，比如说：models.go里面通通放定义的结构体，handlers.go通通都是处理方法，这么做有啥好处呢，显而易见：不用操心依赖，因为你根本没有依赖，这在小的程序之中行的通，但是在大型项目中，这么做，别人是无法维护你的代码的，代码也不能复用，因为你的代码没有功能化，模块化，别人无法引入，还有的做法就是以模块来分离代码，什么意思呢，比如说：你有一个users包和一个accounts包，在users包里面肯定得放User结构体了，那么别人引用这个User就得写出这样的代码：users.User，你的结构体名字中包含了包名，我相信名字是最好的文档，也是代码质量的一个检测指标，这样的做法是不好的，当然这样做最大的问题就是可能会带来循环引用的问题。
因为 Go 目前还处于蓬勃发展期，可能越往后，package 管理的方案也越成熟， 对于 Go package layout 没有完美无缺的方案，这里我将给出一种我总结出来的解决方案，它对于同时包含 lib库和二进制程序的项目十分好用。
先把 layout 贴出来 大家有个直观的感受： 项目目录 foo/ 下有cmd、pkg、vendor 三个顶层目录，cmd 下放置你的二进制程序，pkg 下放置你的 lib 代码，vendor里面管理你的依赖。关于cmd下二进制程序的管理，我推荐使用 Cobra ，使用 Cobra 你可很方便的生成具有层叠子命令的二进制程序。在pkg 目录的 lib库组织，推荐大家看下 Bob 大牛的The Clean Architecture，我简单说下，具体的大家去看原文。你可以现在pkg目录下放置一个最基础的 package ，只有struct或者interface，如：</description>
    </item>
    
    <item>
      <title>go channels 注意事项</title>
      <link>http://fishu.cn/blog/go-channels-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Thu, 11 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://fishu.cn/blog/go-channels-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>在 Go 中，channel 分为unbuffered channel和buffered channel 两种，关于如何使用的问题，这里就不做讨论了。主要来记录下注意事项。
unbuffered channel package main func main() { ch := make(chan int) ch &amp;lt;- 1 &amp;lt;-ch // 没有这行代码也会报同样的错误 }  运行这段代码会出现以下报错： fatal error: all goroutines are asleep - deadlock! 这是因为对于unbuffered channel来说，send 和 receive 都是阻塞操作，除非 channel 的发送和接收端都准备好，否则，send 和 receive 任意一方都会都会导致 goroutine 挂起，出现死锁，解决方法如下：
func main() { ch := make(chan int) go func() { ch &amp;lt;- 1 }() // 另起一个 goroutine &amp;lt;-ch }  buffered channel 大家肯定都知道 buffered channel 是非阻塞的 channel，但是大家有没有对 buffered channel 接收到消息的顺序产生疑问呢，顺序是随机的？还是顺序的？是怎样的顺序？</description>
    </item>
    
    <item>
      <title>【译】Go 命名规范</title>
      <link>http://fishu.cn/blog/%E8%AF%91go-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://fishu.cn/blog/%E8%AF%91go-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</guid>
      <description>原文 What&amp;rsquo;s in a name 略有删改
 
在写代码的时候，常常不知道怎么命名一个package，一个 struct，一个interface，这遍文章将给你一些建议。
Good names 一个好的名字应该是这样：
 统一（容易猜测含义） 简短（敲起来方便） 精准 （容易理解）  一个原则 名字定义的地方和它使用的地方相聚越远，那么它就应该越长，越长，定义越精确，它的用途就容易猜测。
使用驼峰法 Go 中的名字应该使用驼峰法命名，一些IDE在你命名一个变量时，如果你的变量命名不规范，会帮你指出来，比如微软的良心之作：code，在装了Go 插件后会实时提醒。（不要这样命名：names_with_underscores），所有的缩略词都要大些，比如 ServeHTTP 和 IDProcessor。
本地变量 保持它们简短，长的名字让代码难以理解。比如：
 建议用 i 表示 index 建议用 r 表示 reader  Bad：
func RuneCount(buffer []byte) int { index, count := 0, 0 for index &amp;lt; len(buffer) { if buffer[index] &amp;lt; RuneSelf { index++ } else { _, size := DecodeRune(buffer[index:]) index += size } count++ } return count }  Good：</description>
    </item>
    
    <item>
      <title>go break 注意事项</title>
      <link>http://fishu.cn/blog/go-break-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link>
      <pubDate>Sat, 04 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://fishu.cn/blog/go-break-%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid>
      <description>break用来终止执行最内层的 for、 switch 或者 select语句。注意这里相对于 c 语言多出的 switch 和 select 语句。 c 语言中需要在 case 语句块中手动 break，不然自动传递到下一个 case clause的代码块，而 go 中 switch 不像 c 语言那样需要在 case 语句块中手动 break，go 中 case 语句块在执行完后会自动 break 出 switch，如果你需要直接跳到下一个case clause的代码块，那么你需要加入 fallthrough 语句。
break label break label 和 goto label 有着很大的不同。 如果break后面跟着一个 label，则 label 应该紧贴着要终止的for、switch或者selector语句。 下面的代码中 break label2就是错的。
label2: i := 10 label1: for { i++ if i &amp;gt; 20 { break label1 } fmt.Println(i) if i &amp;lt; 10 { break label2 } }  出错信息：invalid break label label2。</description>
    </item>
    
  </channel>
</rss>