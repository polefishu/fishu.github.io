<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 鱼吠</title>
    <link>http://fishu.cn/categories/golang/</link>
    <description>Recent content in Golang on 鱼吠</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2017 Fishu</copyright>
    <lastBuildDate>Tue, 18 Jul 2017 20:26:38 +0800</lastBuildDate>
    
	<atom:link href="http://fishu.cn/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go Package Layout 参考</title>
      <link>http://fishu.cn/blog/go-package-layout-%E5%8F%82%E8%80%83/</link>
      <pubDate>Tue, 18 Jul 2017 20:26:38 +0800</pubDate>
      
      <guid>http://fishu.cn/blog/go-package-layout-%E5%8F%82%E8%80%83/</guid>
      <description>想让你的 Go 代码 简洁明了，你需要做好下面两点：
 命名
 package layout
  命名我在上一篇文章里面讲到了，这次我想分享下自己在 Go 语言 package 设计方面的实践。
package 在 Go 中是这样定义的：包含一个或者多个以.go结尾的文件，同时这些文件都有同一个 package 名并且处于同一个目录中。简单来说就是一个文件夹中放了几个 package 名字相同的 go 文件，package 在 go 中是有独立命名空间的，它里面的全局变量是与其他 package 隔离的，Go不是一门类似 java 这类面向对象的语言，他的设计哲学是模块化，package 是 Go 程序结构层面的唯一组织形式，它将设计、语法、命名、构建、链接和测试都聚于一包中，导入和使用非常简单，所以无 package 不成 Go ，要写出牛逼的代码，必须理解 package 机制，Go coding in go way。
一开始写Go的时候，我总喜欢把所有的东西都放在一个包中，导致这个包臃肿而巨大，往往都是以文件名来隔离函数功能，比如说：models.go里面通通放定义的结构体，handlers.go通通都是处理方法，这么做有啥好处呢，显而易见：不用操心依赖，因为你根本没有依赖，这在小的程序之中行的通，但是在大型项目中，这么做，别人是无法维护你的代码的，代码也不能复用，因为你的代码没有功能化，模块化，别人无法引入，还有的做法就是以模块来分离代码，什么意思呢，比如说：你有一个users包和一个accounts包，在users包里面肯定得放User结构体了，那么别人引用这个User就得写出这样的代码：users.User，你的结构体名字中包含了包名，我相信名字是最好的文档，也是代码质量的一个检测指标，这样的做法是不好的，当然这样做最大的问题就是可能会带来循环引用的问题。
因为 Go 目前还处于蓬勃发展期，可能越往后，package 管理的方案也越成熟， 对于 Go package layout 没有完美无缺的方案，这里我将给出一种我总结出来的解决方案，它对于同时包含 lib库和二进制程序的项目十分好用。
先把 layout 贴出来 大家有个直观的感受： 项目目录 foo/ 下有cmd、pkg、vendor 三个顶层目录，cmd 下放置你的二进制程序，pkg 下放置你的 lib 代码，vendor里面管理你的依赖。关于cmd下二进制程序的管理，我推荐使用 Cobra ，使用 Cobra 你可很方便的生成具有层叠子命令的二进制程序。在pkg 目录的 lib库组织，推荐大家看下 Bob 大牛的The Clean Architecture，我简单说下，具体的大家去看原文。你可以现在pkg目录下放置一个最基础的 package ，只有struct或者interface，如：</description>
    </item>
    
    <item>
      <title>【译】Go 命名规范</title>
      <link>http://fishu.cn/blog/%E8%AF%91go-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://fishu.cn/blog/%E8%AF%91go-%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</guid>
      <description>原文 What&amp;rsquo;s in a name 略有删改
 
在写代码的时候，常常不知道怎么命名一个package，一个 struct，一个interface，这遍文章将给你一些建议。
Good names 一个好的名字应该是这样：
 统一（容易猜测含义） 简短（敲起来方便） 精准 （容易理解）  一个原则 名字定义的地方和它使用的地方相聚越远，那么它就应该越长，越长，定义越精确，它的用途就容易猜测。
使用驼峰法 Go 中的名字应该使用驼峰法命名，一些IDE在你命名一个变量时，如果你的变量命名不规范，会帮你指出来，比如微软的良心之作：code，在装了Go 插件后会实时提醒。（不要这样命名：names_with_underscores），所有的缩略词都要大些，比如 ServeHTTP 和 IDProcessor。
本地变量 保持它们简短，长的名字让代码难以理解。比如：
 建议用 i 表示 index 建议用 r 表示 reader  Bad：
func RuneCount(buffer []byte) int { index, count := 0, 0 for index &amp;lt; len(buffer) { if buffer[index] &amp;lt; RuneSelf { index++ } else { _, size := DecodeRune(buffer[index:]) index += size } count++ } return count }  Good：</description>
    </item>
    
  </channel>
</rss>